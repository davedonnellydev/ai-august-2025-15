---
description: Describes the UX of this app
globs:
alwaysApply: false
---
## Root structure
On the root page, there is a header section with the title of the app 'Webpage Summariser' (clicking on the title should navigate the user back to the root page with the ArticleParser component displayed), there is a main section and a sidebar on the left of the screen. That sidebar contains a list of any previously summarised webpages (meaning the results of the parsing and the summarising should be stored in localStorage). There is also a footer which contains the 'remainingRequests' counter.

## ArticleParser
When the user first arrives on the root page of the app, in the main section there is a short 'Instructions' section which is collapsed by default, there is a TextInput element allowing users to paste the url of the webpage to be summarised, and there is a select dropdown with a list of the SummaryModes for the user to select. There is a section next to the SummaryModes dropdown where the instructions related to the selected SummaryMode is displayed to the user.

User inputs the URL of the webpage to be summarised and the URL is checked against the URLs stored in the localStorage. If there is already an entry for that URL in localStorage, the user is automatically taken to the results page where they can see the results of the summary that have already been generated (see 'ViewResults' section below). If there is no entry for that URL yet, the user stays on the page and can select the SummaryMode they'd like for this URL. When they click the 'Summarise' button, the parseUrl function collects the data from the Postlight Parser and adds it to an array of objects stored in localStorage with all the URL's parsed data. It then runs the POST call to openai/responses with the content and SummaryMode selected, and the result returned is also stored against the URL's object in localStorage under the name of the SummaryMode. It then takes the user to the 'ViewResults' component.

## ViewResults component
The ViewResults component replaces the ArticleParser within the main section of the app whenever a summary for a website is requested to be viewed, either via the left sidebar list of previously summarised pages, or via a new summary request. The ViewResults component will display some of the parsed data from the webpage such as the 'title' of the webpage, the 'url', the 'author', the 'domain' and the 'lead_image_url' (if any) in an info section at the top. Below that there should be a section taking up the rest of the main section which displays the summary generated for that webpage's content. This section should also have a Select dropdown at the top with a list of SummaryModes, but that list should also indicate the SummaryModes with a summary already generated and saved. Selecting a Summary Mode with a value already saved will just display it, whereas selecting one that isn't yet saved will display a button which allows the user to generate a new summary of the already stored content in that summary mode. Generating a summary with a new summary mode for an already stored website should **not** add to the remainingRequests counter. There should also be a button on this page which allows the users to 'refresh summaries' for this website. This button gets a fresh parse of the website from the URL stored, updates all the parsed data in localStorage, and creates a fresh summary based on the new content for **each** Summary Mode that is already saved for that URL. Running this function **should** minus 1 from the remainingRequests counter. There should also be a 'new URL' button which navigates the user back to the root page with the ArticleParser component ready for them to enter a new URL.

## UI Components
Ensure Mantine UI components are used wherever possible and ensure the UI is sleek, modern, not too cluttered with unneccessary containers and ensure the web app meets WCAG 2 web accessibility standards at least, and where possible AAA level compliance.
